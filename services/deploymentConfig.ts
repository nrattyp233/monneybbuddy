// Production Deployment Configuration and Environment Validation\n// Ensures all required environment variables and configurations are properly set\n\nexport interface EnvironmentConfig {\n  // Supabase Configuration\n  SUPABASE_URL: string;\n  SUPABASE_ANON_KEY: string;\n  SUPABASE_SERVICE_ROLE_KEY?: string; // Only needed for Edge Functions\n\n  // Plaid Configuration\n  PLAID_CLIENT_ID: string;\n  PLAID_SECRET: string;\n  PLAID_ENV: 'sandbox' | 'development' | 'production';\n\n  // PayPal Configuration\n  PAYPAL_CLIENT_ID: string;\n  PAYPAL_CLIENT_SECRET: string;\n  PAYPAL_API_URL: string;\n\n  // Security Configuration\n  ALLOWED_ORIGIN: string;\n  JWT_SECRET?: string;\n\n  // Application Configuration\n  NODE_ENV: 'development' | 'production';\n  APP_VERSION?: string;\n  USE_MOCKS: boolean;\n}\n\nexport interface DeploymentChecklist {\n  environmentVariables: { [key: string]: boolean };\n  databaseMigrations: boolean;\n  edgeFunctions: boolean;\n  corsConfiguration: boolean;\n  securityPolicies: boolean;\n  monitoringSetup: boolean;\n  backupConfiguration: boolean;\n}\n\nclass EnvironmentValidator {\n  private requiredVars: (keyof EnvironmentConfig)[] = [\n    'SUPABASE_URL',\n    'SUPABASE_ANON_KEY',\n    'PLAID_CLIENT_ID',\n    'PLAID_SECRET',\n    'PLAID_ENV',\n    'PAYPAL_CLIENT_ID',\n    'PAYPAL_CLIENT_SECRET',\n    'PAYPAL_API_URL',\n    'ALLOWED_ORIGIN',\n    'NODE_ENV'\n  ];\n\n  private optionalVars: (keyof EnvironmentConfig)[] = [\n    'SUPABASE_SERVICE_ROLE_KEY',\n    'JWT_SECRET',\n    'APP_VERSION'\n  ];\n\n  validateEnvironment(): { valid: boolean; errors: string[]; warnings: string[]; config?: EnvironmentConfig } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n    const config: Partial<EnvironmentConfig> = {};\n\n    // Check required variables\n    for (const varName of this.requiredVars) {\n      const value = this.getEnvVar(varName);\n      if (!value) {\n        errors.push(`Missing required environment variable: ${varName}`);\n      } else {\n        config[varName] = this.parseEnvValue(varName, value) as any;\n      }\n    }\n\n    // Check optional variables\n    for (const varName of this.optionalVars) {\n      const value = this.getEnvVar(varName);\n      if (value) {\n        config[varName] = this.parseEnvValue(varName, value) as any;\n      } else {\n        warnings.push(`Optional environment variable not set: ${varName}`);\n      }\n    }\n\n    // Validate specific configurations\n    this.validatePlaidConfig(config, errors, warnings);\n    this.validatePayPalConfig(config, errors, warnings);\n    this.validateSupabaseConfig(config, errors, warnings);\n    this.validateSecurityConfig(config, errors, warnings);\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      config: errors.length === 0 ? config as EnvironmentConfig : undefined\n    };\n  }\n\n  private getEnvVar(name: string): string | undefined {\n    // Check multiple sources for environment variables\n    if (typeof process !== 'undefined' && process.env) {\n      return process.env[name];\n    }\n    if (typeof Deno !== 'undefined' && Deno.env) {\n      return Deno.env.get(name);\n    }\n    return undefined;\n  }\n\n  private parseEnvValue(varName: string, value: string): string | boolean {\n    // Special parsing for boolean values\n    if (varName === 'USE_MOCKS') {\n      return value.toLowerCase() === 'true';\n    }\n    return value;\n  }\n\n  private validatePlaidConfig(config: Partial<EnvironmentConfig>, errors: string[], warnings: string[]) {\n    if (config.PLAID_ENV) {\n      const validEnvs = ['sandbox', 'development', 'production'];\n      if (!validEnvs.includes(config.PLAID_ENV)) {\n        errors.push(`PLAID_ENV must be one of: ${validEnvs.join(', ')}`);\n      }\n\n      // Environment-specific validation\n      if (config.PLAID_ENV === 'production') {\n        if (config.PLAID_CLIENT_ID?.startsWith('sandbox_')) {\n          errors.push('Production environment cannot use sandbox Plaid credentials');\n        }\n        warnings.push('Using Plaid production environment - ensure compliance requirements are met');\n      }\n    }\n  }\n\n  private validatePayPalConfig(config: Partial<EnvironmentConfig>, errors: string[], warnings: string[]) {\n    if (config.PAYPAL_API_URL) {\n      const isProduction = config.PAYPAL_API_URL.includes('api-m.paypal.com');\n      const isSandbox = config.PAYPAL_API_URL.includes('api.sandbox.paypal.com');\n      \n      if (!isProduction && !isSandbox) {\n        warnings.push('PayPal API URL does not appear to be official PayPal endpoint');\n      }\n\n      if (isProduction && config.NODE_ENV !== 'production') {\n        warnings.push('Using PayPal production API in non-production environment');\n      }\n    }\n\n    if (config.PAYPAL_CLIENT_ID?.startsWith('AV') && config.PAYPAL_API_URL?.includes('sandbox')) {\n      warnings.push('PayPal client ID appears to be production, but using sandbox API');\n    }\n  }\n\n  private validateSupabaseConfig(config: Partial<EnvironmentConfig>, errors: string[], warnings: string[]) {\n    if (config.SUPABASE_URL && !config.SUPABASE_URL.startsWith('https://')) {\n      errors.push('SUPABASE_URL must use HTTPS');\n    }\n\n    if (config.SUPABASE_URL && !config.SUPABASE_URL.includes('.supabase.co')) {\n      warnings.push('SUPABASE_URL does not appear to be official Supabase endpoint');\n    }\n\n    if (config.SUPABASE_ANON_KEY && config.SUPABASE_ANON_KEY.length < 100) {\n      warnings.push('SUPABASE_ANON_KEY appears to be too short');\n    }\n  }\n\n  private validateSecurityConfig(config: Partial<EnvironmentConfig>, errors: string[], warnings: string[]) {\n    if (config.ALLOWED_ORIGIN === '*' && config.NODE_ENV === 'production') {\n      errors.push('ALLOWED_ORIGIN cannot be wildcard (*) in production');\n    }\n\n    if (config.ALLOWED_ORIGIN && !config.ALLOWED_ORIGIN.startsWith('https://') && config.NODE_ENV === 'production') {\n      errors.push('ALLOWED_ORIGIN must use HTTPS in production');\n    }\n\n    if (!config.JWT_SECRET && config.NODE_ENV === 'production') {\n      warnings.push('JWT_SECRET not set - some features may not work correctly');\n    }\n  }\n}\n\nclass DeploymentChecker {\n  async checkDeploymentReadiness(): Promise<DeploymentChecklist> {\n    const checklist: DeploymentChecklist = {\n      environmentVariables: {},\n      databaseMigrations: false,\n      edgeFunctions: false,\n      corsConfiguration: false,\n      securityPolicies: false,\n      monitoringSetup: false,\n      backupConfiguration: false\n    };\n\n    // Check environment variables\n    const validator = new EnvironmentValidator();\n    const envValidation = validator.validateEnvironment();\n    checklist.environmentVariables = this.createEnvCheckResults(envValidation);\n\n    // Check database migrations\n    checklist.databaseMigrations = await this.checkDatabaseMigrations();\n\n    // Check Edge Functions deployment\n    checklist.edgeFunctions = await this.checkEdgeFunctions();\n\n    // Check CORS configuration\n    checklist.corsConfiguration = this.checkCorsConfiguration(envValidation.config);\n\n    // Check security policies\n    checklist.securityPolicies = this.checkSecurityPolicies(envValidation.config);\n\n    // Check monitoring setup\n    checklist.monitoringSetup = this.checkMonitoringSetup();\n\n    // Check backup configuration\n    checklist.backupConfiguration = this.checkBackupConfiguration();\n\n    return checklist;\n  }\n\n  private createEnvCheckResults(validation: ReturnType<EnvironmentValidator['validateEnvironment']>) {\n    const results: { [key: string]: boolean } = {};\n    \n    // Mark all required variables\n    const validator = new EnvironmentValidator();\n    const requiredVars = ['SUPABASE_URL', 'SUPABASE_ANON_KEY', 'PLAID_CLIENT_ID', 'PLAID_SECRET', 'PAYPAL_CLIENT_ID', 'PAYPAL_CLIENT_SECRET'];\n    \n    for (const varName of requiredVars) {\n      results[varName] = !validation.errors.some(error => error.includes(varName));\n    }\n\n    return results;\n  }\n\n  private async checkDatabaseMigrations(): Promise<boolean> {\n    // In a real implementation, this would check if all migrations have been applied\n    // For now, we'll check if migration files exist\n    try {\n      const migrationFiles = [\n        '/workspaces/monneybbuddy/supabase/migrations/20250918_add_fee_column.sql',\n        '/workspaces/monneybbuddy/supabase/migrations/20250918_add_paypal_tracking.sql',\n        '/workspaces/monneybbuddy/supabase/migrations/20250918_add_withdrawal_columns.sql'\n      ];\n\n      for (const file of migrationFiles) {\n        try {\n          await Deno.stat(file);\n        } catch {\n          return false;\n        }\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private async checkEdgeFunctions(): Promise<boolean> {\n    // Check if Edge Function files exist\n    const functionFiles = [\n      '/workspaces/monneybbuddy/supabase/functions/create-paypal-order/index.ts',\n      '/workspaces/monneybbuddy/supabase/functions/capture-paypal-order/index.ts',\n      '/workspaces/monneybbuddy/supabase/functions/create-link-token/index.ts',\n      '/workspaces/monneybbuddy/supabase/functions/exchange-public-token/index.ts'\n    ];\n\n    try {\n      for (const file of functionFiles) {\n        await Deno.stat(file);\n      }\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  private checkCorsConfiguration(config?: EnvironmentConfig): boolean {\n    if (!config) return false;\n    \n    // Check if CORS is properly configured\n    return config.ALLOWED_ORIGIN !== undefined && \n           config.ALLOWED_ORIGIN !== '*' && \n           config.ALLOWED_ORIGIN.startsWith('https://');\n  }\n\n  private checkSecurityPolicies(config?: EnvironmentConfig): boolean {\n    if (!config) return false;\n    \n    // Check basic security configurations\n    return config.NODE_ENV === 'production' &&\n           config.PLAID_ENV !== 'sandbox' &&\n           config.PAYPAL_API_URL.includes('api-m.paypal.com');\n  }\n\n  private checkMonitoringSetup(): boolean {\n    // Check if monitoring/logging is configured\n    return true; // We have our production logger setup\n  }\n\n  private checkBackupConfiguration(): boolean {\n    // In a real implementation, this would check backup policies\n    return true; // Supabase handles backups automatically\n  }\n}\n\n// Utility functions for deployment\nexport function validateProductionEnvironment(): { valid: boolean; report: string } {\n  const validator = new EnvironmentValidator();\n  const validation = validator.validateEnvironment();\n  \n  let report = '=== PRODUCTION ENVIRONMENT VALIDATION ===\\n\\n';\n  \n  if (validation.valid) {\n    report += '✅ All required environment variables are set\\n';\n  } else {\n    report += '❌ Environment validation failed\\n\\n';\n    report += 'ERRORS:\\n';\n    validation.errors.forEach(error => {\n      report += `  - ${error}\\n`;\n    });\n  }\n  \n  if (validation.warnings.length > 0) {\n    report += '\\nWARNINGS:\\n';\n    validation.warnings.forEach(warning => {\n      report += `  - ${warning}\\n`;\n    });\n  }\n  \n  return { valid: validation.valid, report };\n}\n\nexport async function generateDeploymentReport(): Promise<string> {\n  const checker = new DeploymentChecker();\n  const checklist = await checker.checkDeploymentReadiness();\n  \n  let report = '=== DEPLOYMENT READINESS CHECKLIST ===\\n\\n';\n  \n  // Environment Variables\n  report += '📋 Environment Variables:\\n';\n  Object.entries(checklist.environmentVariables).forEach(([key, value]) => {\n    report += `  ${value ? '✅' : '❌'} ${key}\\n`;\n  });\n  \n  // Other checks\n  const checks = [\n    { name: 'Database Migrations', status: checklist.databaseMigrations },\n    { name: 'Edge Functions', status: checklist.edgeFunctions },\n    { name: 'CORS Configuration', status: checklist.corsConfiguration },\n    { name: 'Security Policies', status: checklist.securityPolicies },\n    { name: 'Monitoring Setup', status: checklist.monitoringSetup },\n    { name: 'Backup Configuration', status: checklist.backupConfiguration }\n  ];\n  \n  report += '\\n🔧 System Components:\\n';\n  checks.forEach(check => {\n    report += `  ${check.status ? '✅' : '❌'} ${check.name}\\n`;\n  });\n  \n  const allReady = Object.values(checklist.environmentVariables).every(Boolean) &&\n                   checks.every(check => check.status);\n  \n  report += `\\n${allReady ? '🎉 READY FOR DEPLOYMENT' : '⚠️  DEPLOYMENT NOT READY'}\\n`;\n  \n  return report;\n}\n\nexport { EnvironmentValidator, DeploymentChecker };\n